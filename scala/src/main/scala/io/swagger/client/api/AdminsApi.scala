/**
 * Simple Inventory API
 * This is a simple API
 *
 * OpenAPI spec version: 3
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.InventoryItem
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

class AdminsApi(
  val defBasePath: String = "https://virtserver.swaggerhub.com/bgottipatiorg/xascasca/1.0.0",
  defApiInvoker: ApiInvoker = ApiInvoker
) {

  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS+0000")
  }
  implicit val stringReader = ClientResponseReaders.StringReader
  implicit val unitReader = ClientResponseReaders.UnitReader
  implicit val jvalueReader = ClientResponseReaders.JValueReader
  implicit val jsonReader = JsonFormatsReader
  implicit val stringWriter = RequestWriters.StringWriter
  implicit val jsonWriter = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new AdminsApiAsyncHelper(client, config)

  /**
   * adds an inventory item
   * Adds an item to the system
   * @param inventoryItem Inventory item to add (optional)
   * @return void
   */
  def addInventory(inventoryItem: Option[InventoryItem] = None) = {
    val await = Try(Await.result(addInventoryAsync(inventoryItem), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * adds an inventory item asynchronously
   * Adds an item to the system
   * @param inventoryItem Inventory item to add (optional)
   * @return Future(void)
  */
  def addInventoryAsync(inventoryItem: Option[InventoryItem] = None) = {
      helper.addInventory(inventoryItem)
  }

}

class AdminsApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def addInventory(inventoryItem: Option[InventoryItem] = None
    )(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[InventoryItem]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/inventory"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(inventoryItem))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
