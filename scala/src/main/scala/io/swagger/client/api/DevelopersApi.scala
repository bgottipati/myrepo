/**
 * Simple Inventory API
 * This is a simple API
 *
 * OpenAPI spec version: 3
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.InventoryItem
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

class DevelopersApi(
  val defBasePath: String = "https://virtserver.swaggerhub.com/bgottipatiorg/xascasca/1.0.0",
  defApiInvoker: ApiInvoker = ApiInvoker
) {

  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS+0000")
  }
  implicit val stringReader = ClientResponseReaders.StringReader
  implicit val unitReader = ClientResponseReaders.UnitReader
  implicit val jvalueReader = ClientResponseReaders.JValueReader
  implicit val jsonReader = JsonFormatsReader
  implicit val stringWriter = RequestWriters.StringWriter
  implicit val jsonWriter = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new DevelopersApiAsyncHelper(client, config)

  /**
   * searches inventory
   * By passing in the appropriate options, you can search for available inventory in the system 
   * @param searchString pass an optional search string for looking up inventory (optional)
   * @param skip number of records to skip for pagination (optional)
   * @param limit maximum number of records to return (optional)
   * @return List[InventoryItem]
   */
  def searchInventory(searchString: Option[String] = None, skip: Option[Integer] = None, limit: Option[Integer] = None): Option[List[InventoryItem]] = {
    val await = Try(Await.result(searchInventoryAsync(searchString, skip, limit), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * searches inventory asynchronously
   * By passing in the appropriate options, you can search for available inventory in the system 
   * @param searchString pass an optional search string for looking up inventory (optional)
   * @param skip number of records to skip for pagination (optional)
   * @param limit maximum number of records to return (optional)
   * @return Future(List[InventoryItem])
  */
  def searchInventoryAsync(searchString: Option[String] = None, skip: Option[Integer] = None, limit: Option[Integer] = None): Future[List[InventoryItem]] = {
      helper.searchInventory(searchString, skip, limit)
  }

}

class DevelopersApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def searchInventory(searchString: Option[String] = None,
    skip: Option[Integer] = None,
    limit: Option[Integer] = None
    )(implicit reader: ClientResponseReader[List[InventoryItem]]): Future[List[InventoryItem]] = {
    // create path and map variables
    val path = (addFmt("/inventory"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    searchString match {
      case Some(param) => queryParams += "searchString" -> param.toString
      case _ => queryParams
    }
    skip match {
      case Some(param) => queryParams += "skip" -> param.toString
      case _ => queryParams
    }
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
